//- Common mixins that templates can share

mixin Navi(multipage, collapsible)
    div#nav-container.col-md-3
        a(href="#")
            img(id="logo" src="logo_darkgray_80.png" alt="PosAPI logo")
        nav.nav-list.hidden-sm.hidden-xs(data-spy="affix" data-offset-top="60" data-offset-bottom="100")
            ul.nav
                each resourceGroup in api.resourceGroups
                    li
                        a(href="##{(multipage ? 'page:' : '') + slug(resourceGroup.name)}")= resourceGroup.name
                        if (resourceGroup.resources.length)
                            ul.nav(id="#{(multipage ? 'page:' : '') + slug(resourceGroup.name)}-menu", style="display:none;")
                                each resource in resourceGroup.resources
                                    li
                                        if (!condenseNav || (resource.actions.length != 1))
                                            a(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}")= resource.name || 'Resource'
                                            if (resource.actions.length > 0)
                                                ul.nav(id="#{(multipage ? 'page:' : '') + slug(resourceGroup.name)}-submenu", style="display:none;")
                                                    each action in resource.actions
                                                        li
                                                            a(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")
                                                                +Icon(action.method)
                                                                span.indent
                                                                    = action.name || action.method + ' ' + resource.uriTemplate
                                        else
                                            a(href="##{multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : ''}#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                                                - var action = resource.actions[0]
                                                +Icon(action.method)
                                                = resource.name || action.name || action.method + ' ' + resource.uriTemplate



mixin Parameters(params)
    ul.list-group
        li.list-group-item.bg-default: strong Query Parameters
        li.list-group-item.parameters
            dl.dl-horizontal
                each param in params
                    dt= param.name
                    dd
                        code= param.type
                        | &nbsp;
                        if param.required
                            span.required (required)
                        else
                            span (optional)
                        | &nbsp;
                        if param.default
                            span.text-info.default
                                strong Default:&nbsp;
                                span= param.default
                            | &nbsp;
                        if param.example
                            span.text-muted.example
                                strong Example:&nbsp;
                                span= param.example
                        != markdown(param.description)
                        if param.values.length
                            p
                                strong Choices:&nbsp;
                                each value in param.values
                                    code= value.value
                                    = ' '

mixin RequestResponse(apiUrl, title, request, resourceGroup, resource, action, sampleNumber)
    - var id = hash(resourceGroup.name.toString() + resource.name.toString() + action.name.toString() + action.method.toString() + title.toString() + request.name.toString() + request.headers.toString() + request.body.toString() + request.schema.toString())
    - var content = request.description || Object.keys(request.headers).length || request.body || request.schema


    if content
        li.list-group-item.pull-right.collapsed(data-toggle="collapse", data-target="##{id}")
            strong
                = title
                if request.name
                    | &nbsp;&nbsp;
                    code= request.name
                span.toggle.pull-right
                    span.open.fa.fa-angle-down
                    span.closed.fa.fa-angle-right
                each item in request.headers
                    case item.value
                        when 'application/json': span.label.label-default.json= 'JSON'
                        when 'application/xml': span.label.label-default.xml= 'XML'
    else
        li.list-group-item
            strong
                = title
                if request.name
                    | &nbsp;&nbsp;
                    code= request.name

    if content
        li.list-group-item.panel-collapse.collapse(id=id)
            if request.description
                .description!= markdown(request.description)

            pre
                if Object.keys(request.headers).length
                    div.section.unselectable Headers
                    code
                        if request.name
                            case request.name
                                when '200': - var statusCodeText = 'OK'
                                when '400': - var statusCodeText = 'Bad Request'
                                when '403': - var statusCodeText = 'Forbidden'
                                when '404': - var statusCodeText = 'Not Found'
                                when '500': - var statusCodeText = 'Internal Server Error'
                                default: - var statusCodeText = ''
                            != highlight('HTTP/1.1 ' + request.name + ' ' + statusCodeText, 'http')
                        else
                            != highlight(action.method + ' ' + resource.uriTemplate +' HTTP/1.1', 'http')
                            br
                            != highlight('Host: ' + apiUrl, 'http')
                        br
                        each item in request.headers
                            != highlight(item.name + ': ' + item.value, 'http')
                            br
                    if request.body
                        hr
                if request.body
                    div.section.unselectable Body
                    code!= highlight(request.body)
            if request.schema
                pre
                    div.section.unselectable Schema
                    code!= highlight(request.schema)


mixin Examples(apiUrl, resourceGroup, resource, action)
    ul.list-group
        each example in action.examples
            - var requestNumber = 1
            each request in example.requests
                +RequestResponse(apiUrl,'Request', request, resourceGroup, resource, action, requestNumber)
                if (requestNumber == 1)
                    - requestNumber = 0

            - var responseNumber = 1
            each response in example.responses
                +RequestResponse(apiUrl,'Response', response, resourceGroup, resource, action, responseNumber)
                if (responseNumber == 1)
                    - responseNumber = 0

mixin ResourceGroup(apiUrl, resourceGroup, getButtonClass, multipage)
    .panel.panel-default
        .panel-heading
            h2(id="#{slug(resourceGroup.name)}")
                = resourceGroup.name || 'Resource Group'
                | &nbsp;
                a(href="##{multipage ? 'page:' : ''}#{slug(resourceGroup.name)}")
                    i.fa.fa-link
        .panel-body
            if resourceGroup.description
                != markdown(resourceGroup.description)
            each resource in resourceGroup.resources
                h3(id="#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                    = resource.name || 'Resources'
                    | &nbsp;
                    a(href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}")
                        i.fa.fa-link
                if resource.description
                    != markdown(resource.description)
                each action in resource.actions
                    case action.method
                        when 'POST': - var panelClass = 'panel-success'
                        when 'GET': - var panelClass = 'panel-info'
                        when 'PUT': - var panelClass = 'panel-warning'
                        when 'PATCH': - var panelClass = 'panel-warning'
                        when 'DELETE': - var panelClass = 'panel-danger'
                        default: - var panelClass = 'panel-default'
                    - var sectionId = slug(resourceGroup.name) + '-' + slug(resource.name) + '-' + slug(action.method)
                    section.panel(class=panelClass, id=sectionId)
                        .panel-heading
                            
                            - var invokerId = slug(resourceGroup.name) + '-' + slug(resource.name) + '-' + slug(action.method) + '-invoker'
                            button.btn.btn-xs.btn-warning.actionTryIt(onclick='Invoker("' + invokerId +'");')
                                = 'INVOKE'
                                span.glyphicon.glyphicon-transfer(aria-hidden="true")

                            case action.method
                                when 'POST': - var btnClass = 'btn-success'
                                when 'GET': - var btnClass = 'btn-' + getButtonClass
                                when 'PUT': - var btnClass = 'btn-warning'
                                when 'PATCH': - var btnClass = 'btn-warning'
                                when 'DELETE': - var btnClass = 'btn-danger'
                                default: - var btnClass = 'btn-default'
                            div.actionMethod                                
                                a.btn.btn-xs(class=btnClass, href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")= action.method
                            div(style="overflow:hidden")
                                - var indexOfSlash = resource.uriTemplate.indexOf("/", 1)
                                - var servicePrefix = resource.uriTemplate.slice(0, indexOfSlash)
                                - var indexOfQuestionmark = resource.uriTemplate.indexOf("?", 0)
                                if (indexOfQuestionmark == -1)
                                    div.action= resource.uriTemplate.substr(indexOfSlash)
                                else
                                    div.action= resource.uriTemplate.slice(indexOfSlash,indexOfQuestionmark)
                            if action.name
                                div.actionDescription
                                    span(style="text-transform: lowercase")= action.name


                        +Invoker(apiUrl, invokerId, action, resource)

                        if action.description
                            .panel-body!= markdown(action.description)

                        - var params = action.parameters.length ? action.parameters : resource.parameters
                        if params.length
                            +Parameters(params)
                        if action.examples
                            +Examples(apiUrl,resourceGroup, resource, action)

mixin Invoker(apiUrl, invokerId, action, resource)
    ul.list-group.invoker(style="display:none;", id=invokerId)
        li.list-group-item
            div.invoker-title
                strong= 'Invoker'
                span.glyphicon.glyphicon-transfer(aria-hidden="true")
            // get first request sample and check if json
            - var firstRequest
            each example in action.examples
                if (example.requests)
                    - firstRequest = example.requests[0]
                    - break;

            if (firstRequest)

                div.tokenAlert.alert.alert-danger(role="alert", style="display:none;")
                    strong= 'Oh snap!   '
                    = 'You are missing required tokens to perform this operation.'
                    button.btn.btn-s.btn-danger(data-toggle="modal", data-target="#TokenManagement")
                        = 'Token Management'
                        span.glyphicon.glyphicon-pencil.withtext(aria-hidden="true")

                div.alert.alert-danger.alert-dismissible.parameterWarning(role="alert", style="display:none;")
                    button.close(data-dismiss="alert", aria-label="Close")
                        span(aria-hidden="true")= '×'
                    strong= 'Error!   '
                    = 'It seems the parameter description does not fit the endpoint.'
                    br
                    = 'In order for the invoker to work, '
                    strong= 'all '
                    = 'parameters must be documented in the correct order.'

                - var pars = action.parameters.length ? action.parameters : resource.parameters
                if pars.length
                    ul.list-group.param-editor
                        li.list-group-item.bg-default: strong Query Editor
                        li.list-group-item
                            - var paramCounter = 1
                            each param in pars
                                div.row
                                    div.col-xs-2.parameterName
                                        strong= param.name
                                    div.col-xs-4.parameterInput
                                        input.form-control.input-sm(id=invokerId+"_"+param.name, type="text", placeholder="Example: "+ param.example, onkeyup="ParameterInput('" + invokerId + "','" + paramCounter + "','" + param.name +"');")
                                        - paramCounter = paramCounter + 2 // we jump by 2 tofind it easy in the array
                                    div.col-xs-6.description
                                        code= param.type
                                        | &nbsp;
                                        if param.required
                                            span.required (required)
                                        else
                                            span.optional (optional)
                                        div= param.description
                                        if param.values.length
                                            strong Choices:&nbsp;
                                            each value in param.values
                                                a(onclick="$('#"+ invokerId + "_" +param.name +"').val('" + value.value +"').keyup();")
                                                    code= value.value
                                                = ' '

                - var baseUrl = apiUrl.substr(apiUrl.indexOf("/"))
                pre
                    div.section.unselectable Request
                    code.invokerRequestCode(id=invokerId + '-request')
                        div.uriTemplate(style="display: none;")= resource.uriTemplate
                        != highlight(action.method + ' ' + resource.uriTemplate +' HTTP/1.1', 'http')
                        br
                        != highlight('Host: [Host]'+ baseUrl, 'http')
                        br
                        each item in firstRequest.headers
                            != highlight(item.name + ': ' + item.value, 'http')
                            if (item.name.indexOf('x-bwin-') == 0)
                                a(data-toggle="modal", data-target="#TokenManagement")
                                    span.glyphicon.glyphicon-pencil.tokenEdit(aria-hidden="true")
                            br

                    if (firstRequest.body)
                        hr
                        div.requestBodyEditor(id=invokerId+'_editor')= firstRequest.body

                    button.btn.btn-l.btn-primary.pull-right(onclick='CallAPI("'+ invokerId + '","' + baseUrl + '","' + action.method + '");')
                        = 'SEND'
                        span.glyphicon.glyphicon-send.withtext(aria-hidden="true")

                    button.btn.btn-l.btn-default.pull-right.invoker-clear(id=invokerId+'-clear', style="display:none;", onclick='Clear("'+ invokerId + '");')
                        span.glyphicon.glyphicon-trash(aria-hidden="true")
                
                div.rememberTokens.alert.alert-success.alert-dismissible(role="alert", style="display:none;")
                    button.close(data-dismiss="alert", aria-label="Close")
                        span(aria-hidden="true")= '×'
                    div
                        strong= 'New Tokens!   '
                        br
                        = 'The response contains a '
                        strong= 'SessionToken '
                        = 'and '
                        strong= 'UserToken'
                        = '.'
                        br
                        = 'Would you like to remember these for upcoming requests?'
                    
                        button.btn.btn-s.btn-success.pull-right.remember
                            = 'Remember'
                            span.glyphicon.glyphicon-floppy-save.withtext(aria-hidden="true")

                pre(id=invokerId + '-response',style='display:none;')
                    div.section.unselectable Response
                    code(id=invokerId + '-response-header')
                    hr
                    code(id=invokerId + '-response-body')

            else
                div.tokenAlert.alert.alert-warning(role="alert")
                    strong= 'Sorry!   '
                    = 'No request sample was found to trigger this operation.'

mixin Paginate(resourceGroups, index)
    if index < resourceGroups.length - 1
        a.btn.btn-default.pull-right(href="#page:#{slug(resourceGroups[index + 1].name)}")
            | Next&nbsp;
            i.fa.fa-arrow-circle-right

    if index > 0
        a.btn.btn-default(href="#page:#{slug(resourceGroups[index - 1].name)}")
            i.fa.fa-arrow-circle-left
            |  Previous
    else
        a.btn.btn-default(href="#")
            i.fa.fa-arrow-circle-left
            |  Previous
    .clearfix
    hr

mixin Icon(method)
    case method
        when 'GET'
            span.badge.alert-info
                i.fa.fa-arrow-down
        when 'POST'
            span.badge.alert-success
                i.fa.fa-plus
        when 'PUT'
            span.badge.alert-warning
                i.fa.fa-pencil
        when 'PATCH'
            span.badge.alert-warning
                i.fa.fa-pencil
        when 'DELETE'
            span.badge.alert-danger
                i.fa.fa-times
        default
            span.badge
                i.fa.fa-dot-circle-o

mixin Content(getButtonClass, multipage)
    div(data-bind=multipage ? "visible: page() == 'home'" : undefined)
        header
            .page-header
                h1#top= api.name || 'API Documentation'

        .description!= markdown(api.description)

        if multipage
            a.btn.btn-default.pull-right(href="#page:#{slug(api.resourceGroups[0].name)}")
                | Next&nbsp;
                i.fa.fa-arrow-circle-right
            .clearfix
            hr

    - var apiUrl = ''
    each meta in api.metadata
        if meta.name == 'HOST'
            - apiUrl = meta.value

    each resourceGroup, index in api.resourceGroups
        div.resourcePanel(data-bind=multipage ? "visible: page() == '#{slug(resourceGroup.name)}', style: {marginTop: page() == '#{slug(resourceGroup.name)}' ? '38px' : ''}" : undefined)
            +ResourceGroup(apiUrl, resourceGroup, getButtonClass, multipage)

            if multipage
                +Paginate(api.resourceGroups, index)

mixin Multipage()
    //- Multi-page support through Knockout.js
    script(src="//cdnjs.cloudflare.com/ajax/libs/knockout/3.0.0/knockout-min.js")
    script
        :coffee
            class App
                constructor: ->
                    @page = ko.observable 'home'

            window.app = new App()

            window.onhashchange = ->
                vars = {}
                for v in location.hash.substr(1).split(',')
                    parts = v.split ':'
                    vars[parts[0]] = parts[1]

                # Set the page
                window.app.page vars.page or 'home'

                # Scroll to a header if Set
                if vars.header
                    $("##{vars.header}")[0].scrollIntoView true
                else
                    window.scrollTo 0, 0

            ko.applyBindings window.app

            # Load the correct page
            window.onhashchange()